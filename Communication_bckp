
#include <SPI.h>


#define PC 0

#define	uchar	unsigned char
#define	uint	unsigned int

//Maximum length of the array
#define MAX_LEN 16

/////////////////////////////////////////////////////////////////////
//set the pin
/////////////////////////////////////////////////////////////////////
const int chipSelectPin = 10;
const int NRSTPD = 5;

//MF522 Command word
#define PCD_IDLE              0x00               //NO action; Cancel the current command
#define PCD_AUTHENT           0x0E               //Authentication Key
#define PCD_RECEIVE           0x08               //Receive Data
#define PCD_TRANSMIT          0x04               //Transmit data
#define PCD_TRANSCEIVE        0x0C               //Transmit and receive data,
#define PCD_RESETPHASE        0x0F               //Reset
#define PCD_CALCCRC           0x03               //CRC Calculate

// Mifare_One card command word
# define PICC_REQIDL          0x26               // find the antenna area does not enter hibernation
# define PICC_REQALL          0x52               // find all the cards antenna area
# define PICC_ANTICOLL        0x93               // anti-collision
# define PICC_SElECTTAG       0x93               // election card
# define PICC_AUTHENT1A       0x60               // authentication key A
# define PICC_AUTHENT1B       0x61               // authentication key B
# define PICC_READ            0x30               // Read Block
# define PICC_WRITE           0xA0               // write block
# define PICC_DECREMENT       0xC0               // debit
# define PICC_INCREMENT       0xC1               // recharge
# define PICC_RESTORE         0xC2               // transfer block data to the buffer
# define PICC_TRANSFER        0xB0               // save the data in the buffer
# define PICC_HALT            0x50               // Sleep


//And MF522 The error code is returned when communication
#define MI_OK                 0
#define MI_NOTAGERR           1
#define MI_ERR                2


//------------------MFRC522 Register---------------
//Page 0:Command and Status
#define     Reserved00            0x00
#define     CommandReg            0x01
#define     CommIEnReg            0x02
#define     DivlEnReg             0x03
#define     CommIrqReg            0x04
#define     DivIrqReg             0x05
#define     ErrorReg              0x06
#define     Status1Reg            0x07
#define     Status2Reg            0x08
#define     FIFODataReg           0x09
#define     FIFOLevelReg          0x0A
#define     WaterLevelReg         0x0B
#define     ControlReg            0x0C
#define     BitFramingReg         0x0D
#define     CollReg               0x0E
#define     Reserved01            0x0F
//Page 1:Command
#define     Reserved10            0x10
#define     ModeReg               0x11
#define     TxModeReg             0x12
#define     RxModeReg             0x13
#define     TxControlReg          0x14
#define     TxAutoReg             0x15
#define     TxSelReg              0x16
#define     RxSelReg              0x17
#define     RxThresholdReg        0x18
#define     DemodReg              0x19
#define     Reserved11            0x1A
#define     Reserved12            0x1B
#define     MifareReg             0x1C
#define     Reserved13            0x1D
#define     Reserved14            0x1E
#define     SerialSpeedReg        0x1F
//Page 2:CFG
#define     Reserved20            0x20
#define     CRCResultRegM         0x21
#define     CRCResultRegL         0x22
#define     Reserved21            0x23
#define     ModWidthReg           0x24
#define     Reserved22            0x25
#define     RFCfgReg              0x26
#define     GsNReg                0x27
#define     CWGsPReg	          0x28
#define     ModGsPReg             0x29
#define     TModeReg              0x2A
#define     TPrescalerReg         0x2B
#define     TReloadRegH           0x2C
#define     TReloadRegL           0x2D
#define     TCounterValueRegH     0x2E
#define     TCounterValueRegL     0x2F
//Page 3:TestRegister
#define     Reserved30            0x30
#define     TestSel1Reg           0x31
#define     TestSel2Reg           0x32
#define     TestPinEnReg          0x33
#define     TestPinValueReg       0x34
#define     TestBusReg            0x35
#define     AutoTestReg           0x36
#define     VersionReg            0x37
#define     AnalogTestReg         0x38
#define     TestDAC1Reg           0x39
#define     TestDAC2Reg           0x3A
#define     TestADCReg            0x3B
#define     Reserved31            0x3C
#define     Reserved32            0x3D
#define     Reserved33            0x3E
#define     Reserved34		  0x3F
//-----------------------------------------------

//4 bytes card serial number, the first 5 bytes for the checksum byte
uchar serNum[5];
uchar comand_read_picc[7]={PICC_READ,0x20,0x01};
uchar data_read_picc[1024];
uchar data_write_picc[16]={'T','h','i','a','g','o',' ','e',' ','M','e','l','i','s','s','a'};
uchar n_of_block;
uchar Actual_Command;
uchar  writeData[16]={0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100};  //Initialization 100 dollars
uchar  moneyConsume = 18 ;  //Consumption of 18 yuan
uchar  moneyAdd = 10 ;  //Recharge 10 yuan
//Sector A password, 16 sectors, each sector password 6Byte
 uchar sectorKey[7] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,0xFF};

 uchar sectorKeyA[16][16] = {{0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
                             {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
                             //{0x19, 0x84, 0x07, 0x15, 0x76, 0x14},
                             {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
                            };
 uchar sectorNewKeyA[16][16] = {{0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
                                {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xff,0x07,0x80,0x69, 0x19,0x84,0x07,0x15,0x76,0x14},
                                 //you can set another ket , such as  " 0x19, 0x84, 0x07, 0x15, 0x76, 0x14 "
                                 //{0x19, 0x84, 0x07, 0x15, 0x76, 0x14, 0xff,0x07,0x80,0x69, 0x19,0x84,0x07,0x15,0x76,0x14},
                                 // but when loop, please set the  sectorKeyA, the same key, so that RFID module can read the card
                                {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xff,0x07,0x80,0x69, 0x19,0x33,0x07,0x15,0x34,0x14},
                               };
char buffer_receive[64];
int control_buffer;
int control_leitura;
int control_escrita;

void setup() {


  // start the SPI library:
   SPI.begin();
  pinMode(chipSelectPin,OUTPUT);             // Set digital pin 10 as OUTPUT to connect it to the RFID /ENABLE pin
    digitalWrite(chipSelectPin, LOW);          // Activate the RFID reader
  pinMode(NRSTPD,OUTPUT);  // Set digital pin 10 , Not Reset and Power-down
  digitalWrite(NRSTPD, HIGH);
  delay(1000);
  digitalWrite(NRSTPD, LOW);
  Serial.begin(115200);
  Clean_Buffer();
  control_leitura=0;
  control_escrita=0;
  Actual_Command='N';
 }

void loop()
{
}

/*
 * Function Nameï¼šWrite_MFRC5200
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parametersï¼šaddr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(uchar addr, uchar val)
{
        digitalWrite(chipSelectPin, LOW);

    //Address Formatï¼š0XXXXXX0
    SPI.transfer((addr<<1)&0x7E);
    SPI.transfer(val);
    digitalWrite(chipSelectPin, HIGH);

}


/*
 * Function Nameï¼šRead_MFRC522
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the
 */
uchar Read_MFRC522(uchar addr)
{
    uchar val;
    digitalWrite(chipSelectPin, LOW);

    //Address Formatï¼š1XXXXXX0
    SPI.transfer(((addr<<1)&0x7E) | 0x80);
    val =SPI.transfer(0x00);

    digitalWrite(chipSelectPin, HIGH);
    return val;
}

/*
 * Function Nameï¼šSetBitMask
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask)
{
    uchar tmp;
    tmp = Read_MFRC522(reg);
    Write_MFRC522(reg, tmp | mask);  // set bit mask
}


/*
 * Function Name: ClearBitMask
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(uchar reg, uchar mask)
{
    uchar tmp;
    tmp = Read_MFRC522(reg);
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
}


/*
 * Function Nameï¼šAntennaOn
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
    uchar temp;

    temp = Read_MFRC522(TxControlReg);
    if (!(temp & 0x03))
    {
        SetBitMask(TxControlReg, 0x03);
    }
}


/*
  * Function Name: AntennaOff
  * Description: Close antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
  * Input: None
  * Return value: None
 */
void AntennaOff(void)
{
    ClearBitMask(TxControlReg, 0x03);
}


/*
 * Function Name: ResetMFRC522
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
}


/*
 * Function Nameï¼šInitMFRC522
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
    digitalWrite(NRSTPD,HIGH);

    MFRC522_Reset();

    //Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
    Write_MFRC522(TModeReg, 0x8D);		//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
    Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
    Write_MFRC522(TReloadRegL, 30);
    Write_MFRC522(TReloadRegH, 0);

    Write_MFRC522(TxAutoReg, 0x40);		//100%ASK
    Write_MFRC522(ModeReg, 0x3D);		//CRC Initial value 0x6363	???///comentar

    //ClearBitMask(Status2Reg, 0x08);		//MFCrypto1On=0
    //Write_MFRC522(RxSelReg, 0x86);		//RxWait = RxSelReg[5..0]
    //Write_MFRC522(RFCfgReg, 0x7F);   		//RxGain = 48dB

    AntennaOn();		//Open the antenna
        delay(150);
}


/*
 * Function Nameï¼šMFRC522_Request
 * Description: Find cards, read the card type number
 * Input parameters: reqMode - find cards way
 *			 TagType - Return Card Type
 *			 	0x4400 = Mifare_UltraLight
 *				0x0400 = Mifare_One(S50)
 *				0x0200 = Mifare_One(S70)
 *				0x0800 = Mifare_Pro(X)
 *				0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Request(uchar reqMode, uchar *TagType)
{
    uchar status;
    uint backBits;			//The received data bits

    Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]	???

    TagType[0] = reqMode;
    status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);

    if ((status != MI_OK) || (backBits != 0x10))
    {
        status = MI_ERR;
    }

    return status;
}


/*
 * Function Name: MFRC522_ToCard
 * Description: RC522 and ISO14443 card communication
 * Input Parameters: command - MF522 command word,
 *			 sendData--RC522 sent to the card by the data
 *			 sendLen--Length of data sent
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen, uchar *backData, uint *backLen)
{
    uchar status = MI_ERR;
    uchar irqEn = 0x00;
    uchar waitIRq = 0x00;
    uchar lastBits;
    uchar n;
    uint i;

    switch (command)
    {
        case PCD_AUTHENT:		//Certification cards close
        {
            irqEn = 0x12;
            waitIRq = 0x10;
            break;
        }
        case PCD_TRANSCEIVE:	//Transmit FIFO data
        {
            irqEn = 0x77;
            waitIRq = 0x30;
            break;
        }
        default:
            break;
    }

    Write_MFRC522(CommIEnReg, irqEn|0x80);	//Interrupt request
    ClearBitMask(CommIrqReg, 0x80);			//Clear all interrupt request bit
    SetBitMask(FIFOLevelReg, 0x80);			//FlushBuffer=1, FIFO Initialization

    Write_MFRC522(CommandReg, PCD_IDLE);	//NO action; Cancel the current command???

    //Writing data to the FIFO
    for (i=0; i<sendLen; i++)
    {
        Write_MFRC522(FIFODataReg, sendData[i]);
    }

    //Execute the command
    Write_MFRC522(CommandReg, command);
    if (command == PCD_TRANSCEIVE)
    {
        SetBitMask(BitFramingReg, 0x80);		//StartSend=1,transmission of data starts
    }

    //Waiting to receive data to complete
    i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
    do
    {
        //CommIrqReg[7..0]
        //Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
        i--;
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0

    if (i != 0)
    {
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
        {
            status = MI_OK;
            if (n & irqEn & 0x01)
            {
                status = MI_NOTAGERR;			//??
            }

            if (command == PCD_TRANSCEIVE)
            {
                n = Read_MFRC522(FIFOLevelReg);
                lastBits = Read_MFRC522(ControlReg) & 0x07;
                if (lastBits)
                {
                    *backLen = (n-1)*8 + lastBits;
                }
                else
                {
                    *backLen = n*8;
                }

                if (n == 0)
                {
                    n = 1;
                }
                if (n > MAX_LEN)
                {
                    n = MAX_LEN;
                }

                //Reading the received data in FIFO
                for (i=0; i<n; i++)
                {
                    backData[i] = Read_MFRC522(FIFODataReg);
                }
            }
        }
        else
        {
            status = MI_ERR;
        }

    }

    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE);

    return status;
}


/*
 * Function Name: MFRC522_Anticoll
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Anticoll(uchar *serNum)
{
    uchar status;
    uchar i;
    uchar serNumCheck=0;
    uint unLen;


    //ClearBitMask(Status2Reg, 0x08);		//TempSensclear
    //ClearBitMask(CollReg,0x80);			//ValuesAfterColl
    Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]

    serNum[0] = PICC_ANTICOLL;
    serNum[1] = 0x20;
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);

    if (status == MI_OK)
    {
        //Check card serial number
        for (i=0; i<4; i++)
        {
            serNumCheck ^= serNum[i];
        }
        if (serNumCheck != serNum[i])
        {
            status = MI_ERR;
        }
    }

    //SetBitMask(CollReg, 0x80);		//ValuesAfterColl=1

    return status;
}


/*
 * Function Name: CalulateCRC
 * Description: CRC calculation with MF522
 * Input parameters: pIndata - To read the CRC data, len - the data length, pOutData - CRC calculation results
 * Return value: None
 */
void CalulateCRC(uchar *pIndata, uchar len, uchar *pOutData)
{
    uchar i, n;

    ClearBitMask(DivIrqReg, 0x04);			//CRCIrq = 0
    SetBitMask(FIFOLevelReg, 0x80);			//Clear the FIFO pointer
    //Write_MFRC522(CommandReg, PCD_IDLE);

    //Writing data to the FIFO
    for (i=0; i<len; i++)
    {
        Write_MFRC522(FIFODataReg, *(pIndata+i));
    }
    Write_MFRC522(CommandReg, PCD_CALCCRC);

    //Wait CRC calculation is complete
    i = 0xFF;
    do
    {
        n = Read_MFRC522(DivIrqReg);
        i--;
    }
    while ((i!=0) && !(n&0x04));			//CRCIrq = 1

    //Read CRC calculation result
    pOutData[0] = Read_MFRC522(CRCResultRegL);
    pOutData[1] = Read_MFRC522(CRCResultRegM);
}


/*
 * Function Name: MFRC522_SelectTag
 * Description: election card, read the card memory capacity
 * Input parameters: serNum - Incoming card serial number
 * Return value: the successful return of card capacity
 */
uchar MFRC522_SelectTag(uchar *serNum)
{
    uchar i;
    uchar status;
    uchar size;
    uint recvBits;
    uchar buffer[9];

    //ClearBitMask(Status2Reg, 0x08);			//MFCrypto1On=0

    buffer[0] = PICC_SElECTTAG;
    buffer[1] = 0x70;
    for (i=0; i<5; i++)
    {
        buffer[i+2] = *(serNum+i);
    }
    CalulateCRC(buffer, 7, &buffer[7]);		//??
    status = MFRC522_ToCard(PCD_TRANSCEIVE, buffer, 9, buffer, &recvBits);

    if ((status == MI_OK) && (recvBits == 0x18))
    {
        size = buffer[0];
    }
    else
    {
        size = 0;
    }

    return size;
}


/*
 * Function Name: MFRC522_Auth
 * Description: Verify card password
 * Input parameters: authMode - Password Authentication Mode
                 0x60 = A key authentication
                 0x61 = Authentication Key B
             BlockAddr--Block address
             Sectorkey--Sector password
             serNum--Card serial number, 4-byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Auth(uchar authMode, uchar BlockAddr, uchar *Sectorkey, uchar *serNum)
{
    uchar status;
    uint recvBits;
    uchar i;
    uchar buff[12];

    //Verify the command block address + sector + password + card serial number
    buff[0] = authMode;
    buff[1] = BlockAddr;
    for (i=0; i<6; i++)
    {
        buff[i+2] = *(Sectorkey+i);
    }
    for (i=0; i<4; i++)
    {
        buff[i+8] = *(serNum+i);
    }
    status = MFRC522_ToCard(PCD_AUTHENT, buff, 12, buff, &recvBits);

    if ((status != MI_OK) || (!(Read_MFRC522(Status2Reg) & 0x08)))
    {
        status = MI_ERR;
    }

    return status;
}


/*
 * Function Name: MFRC522_Read
 * Description: Read block data
 * Input parameters: blockAddr - block address; recvData - read block data
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Read(uchar blockAddr, uchar *recvData)
{
    uchar status;
    uint unLen;
    recvData[0] = PICC_READ;
    recvData[1] = blockAddr;
    CalulateCRC(recvData,2, &recvData[2]);
    status = MFRC522_ToCard(PCD_TRANSCEIVE, recvData, 4, recvData,&unLen);

    if ((status != MI_OK) || (unLen != 0x90))
    {
        status = MI_ERR;
    }

    return status;
}


/*
 * Function Name: MFRC522_Write
 * Description: Write block data
 * Input parameters: blockAddr - block address; writeData - to 16-byte data block write
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Write(uchar blockAddr, uchar *writeData)
{
    uchar status;
    uint recvBits;
    uchar i;
    uchar buff[18];

    buff[0] = PICC_WRITE;
    buff[1] = blockAddr;
    CalulateCRC(buff, 2, &buff[2]);
    status = MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &recvBits);

    if ((status != MI_OK) || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A))
    {
        status = MI_ERR;
    }

    if (status == MI_OK)
    {
        for (i=0; i<16; i++)		//Data to the FIFO write 16Byte
        {
            buff[i] = *(writeData+i);
        }
        CalulateCRC(buff, 16, &buff[16]);
        status = MFRC522_ToCard(PCD_TRANSCEIVE, buff, 18, buff, &recvBits);

        if ((status != MI_OK) || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A))
        {
            status = MI_ERR;
        }
    }

    return status;
}


/*
 * Function Name: MFRC522_Halt
 * Description: Command card into hibernation
 * Input: None
 * Return value: None
 */
void MFRC522_Halt(void)
{
    uchar status;
    uint unLen;
    uchar buff[4];

    buff[0] = PICC_HALT;
    buff[1] = 0;
    CalulateCRC(buff, 2, &buff[2]);

    status = MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff,&unLen);
}



//READ ONE ZONE


void Read_Zone(uint zone)

{
  uchar status;
 for(uint i=0;i<4;i++){
 status= MFRC522_Read(4*zone+i,&data_read_picc[(i*16)+(zone)*64]);
 if(status==MI_OK){
     if(PC){
       Serial.print("Leitura do bloco ");
       Serial.print(i);
       Serial.print(" da zona ");
       Serial.print(zone);
       Serial.println(" efetuada com sucesso");
       }
  }
 else
    {
      if(PC){
        Serial.print("Problemas na leitura  ");
        Serial.println(status);
      }
    }
 }

}

void Read_Tag()
{
  uchar tmp, checksum1;
  uchar str[MAX_LEN];
  int length=1024;
  uchar status;
  for(int i=0;i<16;i++)
    {
          status= MFRC522_Auth(0x60, i*4,&sectorKey[0], &serNum[0]);
          if(status==MI_OK)
          {
            if(PC){
              Serial.print("Autentificacao do sector ");
              Serial.print(i);
              Serial.println(" bem sucedida");
            }
            Read_Zone(i);
           // for(int i=0;i<length_data_picc;i++)

          }
          else{
            if(PC){
             Serial.println("Problemas ao autentificar o cartao");
            }
          length=(i+1)*4*16;
          i=17;
          }
    }
 if(PC){
    for(int i=0;i<length;i++){
     if(i%16==0)
       Serial.println();
      Serial.print((char)data_read_picc[i]);
   }
  Serial.println("\n fim da leitura");
 }
}

int  Write_Block(int block)
{
  uchar status;
  if((block+1)%4==0 || block <= 0 || block>=63 )
  {
    if(PC){
      Serial.println("Bloco proibido");
    }
    return -1;
  }
  else{
  status=MFRC522_Write(block, &data_write_picc[0]);
  if(status==MI_OK){
    if(PC){
     Serial.println("Escrita realizada com sucesso");
    }
    return 1;
  }
  else {
    if(PC){
     Serial.println("Problemas na escrita");
    }
    return -1;
  }
  }
  return 1;
}

int Write_Tag(){

 uchar status;
 if(PC){
   Serial.println("teste de escrita");
 }
 int block=0;
 block=(int)n_of_block;
 status= MFRC522_Auth(0x60,block,&sectorKey[0], &serNum[0]);
   if(status==MI_OK)
          {
            if(PC){
              Serial.print("Autentificacao do sector ");
              Serial.print(block);
              Serial.println(" bem sucedida");
            }
            return (Write_Block(block));
          }
    else{
      if(PC){
        Serial.println("Problemas ao autentificar o cartao");
      }
      return -1;
     }

}



int Write_Command(){


 MFRC522_Init();
 delay(50);
 uchar i,tmp, checksum1;
 uchar str[MAX_LEN];
 uchar status;
  status = MFRC522_Request(PICC_REQIDL, str);
   if (status == MI_OK)
  {
    if(PC){
      Serial.println("Request efetuado com sucesso");
    }
  }
  else
  {
    if(PC){
      Serial.println("Erro no Request MRF522");
    }
    //return 0;
  }
  status = MFRC522_Anticoll(str);
   memcpy(serNum, str, 5);
   if (status == MI_OK)
   {
   checksum1 = serNum[0] ^ serNum[1] ^ serNum[2] ^ serNum[3];
    if(PC){
      Serial.println("Card encontrado");
    }
  status= MFRC522_SelectTag(&serNum[0]);
    if(status!=0){
      if(PC){
        Serial.println("Agora a escrita");
      }
      return Write_Tag();
    }
      else{
        if(PC){
         Serial.println("Problemas ao selecionar o cartao");
        }
       return 0;
      }
    }
   else{
       if(PC){
         Serial.println("Problemas no anticol");
       }
       return 0;
      }
  MFRC522_Halt();
  AntennaOff();
  delay(50);
  return 1;
}

void serialEvent() {
 if(PC){
   Serial.println("Fuction event with control_buf = ");
 }
 buffer_receive[control_buffer]=Serial.read();
 control_buffer++;
 if(PC){
   Serial.println(control_buffer);
   Serial.print(" dado recebido ");
   Serial.println(char(buffer_receive[control_buffer-1]));
 }
 if(control_buffer==64)
        {
          if(PC){
          Serial.println("buffer cheio");
          }
          control_buffer=0;
        }
 if(control_buffer==1 && buffer_receive[0]!='"' && Actual_Command =='N')
   {
     Clean_Buffer();
   }
 if(control_buffer>=4)
      Check_Command();


}



void Check_Command(){

  if(buffer_receive[0]=='"' && buffer_receive[1]=='R' && buffer_receive[2]=='r' &&buffer_receive[3]=='"')
  {
    //Solicitaço de leitura
    Serial.println("\"AK\"");
    control_escrita=0;
    control_leitura=0;
    Actual_Command='R';
  }
  else if(buffer_receive[0]=='"' && buffer_receive[1]=='W' && buffer_receive[2]=='r' &&buffer_receive[3]=='"')
      {
        //Solicitaço de escrita
        Serial.println("\"AK\"");
        control_escrita=1;
        control_leitura=0;
        Actual_Command='W';
      }
  else if(buffer_receive[0]=='"' && buffer_receive[1]=='R' && buffer_receive[2]=='.' && buffer_receive[3]=='"'&& Actual_Command=='R')
        {
          //Comando de leitura
          if(PC){
            Serial.print("Comando R. com buffer de leitura = ");
            Serial.println(control_leitura);
          }
          if(Read_Command()){
          Send_Data();
          }
          else{
           Serial.println("\"NK\"");
          }
        }
   else if(buffer_receive[0]=='"' && buffer_receive[1]=='A' && buffer_receive[2]=='K' && buffer_receive[3]=='"' && control_leitura>0)
               Send_Data();
   else if(buffer_receive[0]=='"' && buffer_receive[1]=='N' && buffer_receive[2]=='K' && buffer_receive[3]=='"' && control_leitura>0 )
           {
               control_leitura--;
               Send_Data();
           }

   else if(buffer_receive[0]=='"' && buffer_receive[1]=='W' && buffer_receive[2]=='"' && Actual_Command=='W')
          {
           //Comando de escrita
           if(PC){
             Serial.println("Entrou no comando escrtia");
             }
           n_of_block=buffer_receive[3];
           control_escrita=1;

          }
    else if(control_escrita>=1 && Actual_Command=='W'){
          if(PC){
            Serial.println(" Formando mensagem a ser escrita");
          }
          for(int i=0;i<4;i++)
              data_write_picc[i+4*(control_escrita-1)]=buffer_receive[i];
            control_escrita++;
          if (control_escrita==5)
          {
            if(PC){
             Serial.print("Mensagem a ser gravada no cartao ");
             for(int a=0;a<16;a++)
                Serial.print(char(data_write_picc[a]));
             Serial.print("   na posicao ");
             Serial.println(int(n_of_block));
            }
            if(Write_Command()){
              Serial.println("\"AK\"");
              if(PC){
               Serial.println("Escrita efetuada com sucesso");
              }
            }
            else{
             Serial.println("\"NK\"");
            }
            control_escrita=0;
            Actual_Command='N';
          }

    }
   else if(buffer_receive[0]=='"' && buffer_receive[1]=='Q' && buffer_receive[2]=='.' && buffer_receive[3]=='"'){
    if(PC){
      Serial.println("Comando de abortar");
    }
    Serial.println("\"AK\"");
    control_leitura=0;
    control_escrita=0;
    Actual_Command='N';
   }
   else if (Actual_Command =='N')
   {
     if(PC){
     Serial.println("Sem comando selecionado");
     }
   }
  Clean_Buffer();
}

void Clean_Buffer(){
  control_buffer=0;
  for(int i=0;i<64;i++)
    buffer_receive[i]=0x00;
}

int Read_Command(){


 MFRC522_Init();
 delay(50);
 uchar i,tmp, checksum1;
 uchar str[MAX_LEN];
 uchar status;
 uint length_data_picc = 1000;
 for(int i =0 ; i<1024;i++)
   data_read_picc[i]=0xFE;
  status = MFRC522_Request(PICC_REQIDL, str);
   if (status == MI_OK)
  {
    if(PC){
      Serial.println("Request efetuado com sucesso");
    }
  }
  else
  {
    if(PC){
      Serial.println("Erro no Request MRF522");
    }
    //return 0;
  }
  status = MFRC522_Anticoll(str);
   memcpy(serNum, str, 5);
   if (status == MI_OK)
   {
   checksum1 = serNum[0] ^ serNum[1] ^ serNum[2] ^ serNum[3];
    if(PC){
      Serial.println("Card encontrado");
    }
  status= MFRC522_SelectTag(&serNum[0]);
    if(status!=0){
      if(PC){
        Serial.println("Agora a leitura");
      }
      Read_Tag();
    }
      else{
        if(PC){
         Serial.println("Problemas ao selecionar o cartao");
        }
       return 0;
      }
    }
   else{
       if(PC){
         Serial.println("Problemas no anticol");
       }
       return 0;
      }
  MFRC522_Halt();
  AntennaOff();
  delay(50);
  return 1;
}

void Send_Data(){
 if(control_leitura<64){
 if(PC){
   Serial.println("Send Data");
 }
 uchar package[21];
 package[0]=(uchar)'\"';
 package[1]=(uchar)'R';
 package[2]= (uchar)'\"';
 package[3]=(uchar)control_leitura;
 for(int x =0;x<16;x++)
   {
     package[4+x]=data_read_picc[x+control_leitura*16];
   }
 package[20]=0;
 Serial.println((char*)&package[0]);
 control_leitura++;
 }
 else
 {
   Serial.println("END"); ;// PRECISO PREPARAR A MENSAGEM CERTA A SER ENVIADA
   control_leitura=0;
 }

}

